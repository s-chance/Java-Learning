public class Test {
    public static void main(String[] args) {
        //关于抽象类、抽象方法
        //可以看到平常使用多态调用子类的方法时，子类从父类继承的方法，父类方法本身并不执行
        //这样为了减少不必要的代码，就会将父类中被继承重写的普通方法声明为抽象方法
        //abstract修饰抽象方法
        Pet pd = new Dog();
        pd.f1();
        Pet pc = new Cat();
        pc.f1();


        //同时，抽象类本身不能直接实例化，但可以通过多态指向子类
        //Pet p = new Pet();


        //抽象类与普通类主要的区别就是抽象类可以拥有抽象方法，但不能像普通类一样直接实例化


        //关于接口interface，接口相当于功能，不同于父类的继承，接口可以多个实现
        Cat c = new Cat();
        c.eat();
        c.run();
        c.play();

        //接口和抽象类：它们都是一种抽象，不过抽象类中还可以有普通方法，
        //接口和抽象类都不能实例化
        //抽象类还是类，只能单根继承，但是接口可以多个实现

        //关于debug调试功能，debug通过断点可以使程序运行时暂停在断点处，然后可以通过操作，
        //使程序一步步执行，可以详细地看清程序执行的过程
        //debug是非常重要的功能

        //关于异常
        //异常分为编译异常，即代码本身有问题，
        // 运行时异常，即代码本身没有问题，但是放在程序这个逻辑里会产生问题


        int a = 1;
        int b = 0;

        //代码本身单独来看都没有问题，但是这些代码放在这个程序里的逻辑不对
        //异常处理：try-catch语句
        try {
            //System.out.println(a/b);
            System.out.println(b/a);

        } catch (Exception e) {
            System.out.println("can't div by zero");
        }

        //当try捕获的语句存在问题时，便会执行catch中的代码，而不会在console控制台报错，
        //若try捕获的语句没有问题，则正常执行try中的代码，catch中的代码则不执行
        //日常开发中，很难编写一个几乎不会遇到任何异常情况的程序，因此try-catch语句使用也很重要
    }
}
